/*
 * pskc.h - header file for libpskc
 * Copyright (C) 2012 Simon Josefsson
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef PSKC_H
#define PSKC_H

#ifndef PSKCAPI
# if defined LIBPSKC_BUILDING && defined HAVE_VISIBILITY && HAVE_VISIBILITY
#  define PSKCAPI __attribute__((__visibility__("default")))
# elif defined LIBPSKC_BUILDING && defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllexport)
# elif defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllimport)
# else
#  define PSKCAPI
# endif
#endif

#include <stddef.h> /* size_t */

/**
 * PSKC_VERSION
 *
 * Pre-processor symbol with a string that describe the header file
 * version number.  Used together with pskc_check_version() to verify
 * header file and run-time library consistency.
 */
#define PSKC_VERSION "@VERSION@"

/**
 * PSKC_VERSION_NUMBER
 *
 * Pre-processor symbol with a hexadecimal value describing the header
 * file version number.  For example, when the header version is 1.2.3
 * this symbol will have the value 0x01020300.  The last two digits
 * are only used between public releases, and will otherwise be 00.
 */
#define PSKC_VERSION_NUMBER @VERSION_NUMBER@

/**
 * pskc_rc:
 * @PSKC_OK: Successful return.
 * @PSKC_MALLOC_ERROR: Memory allocation failed.
 * @PSKC_XML_PARSE_ERROR: XML parse error.
 * @PSKC_XML_SYNTAX_ERROR: Syntax error in XML data.
 * @PSKC_UNKNOWN_OUTPUT_FORMAT: Unknown output format.
 * @PSKC_LAST_ERROR: Meta-error indicating the last error code, for use
 *   when iterating over all error codes or similar.
 *
 * Return codes for PSKC functions.  All return codes are negative
 * except for the successful code %PSKC_OK which are guaranteed to be
 * 0.  Positive values are reserved for non-error return codes.
 *
 * Note that the #pskc_rc enumeration may be extended at a later date
 * to include new return codes.
 */
typedef enum
{
  PSKC_OK = 0,
  PSKC_MALLOC_ERROR = -1,
  PSKC_XML_PARSE_ERROR = -2,
  PSKC_XML_SYNTAX_ERROR = -3,
  PSKC_UNKNOWN_OUTPUT_FORMAT = -4,
  /* When adding anything above, you need to update errors.c and
     the following constant. */
  PSKC_LAST_ERROR = -4
} pskc_rc;

/* Global */

extern PSKCAPI int pskc_global_init (void);
extern PSKCAPI int pskc_global_done (void);

extern PSKCAPI const char *pskc_check_version (const char *req_version);

extern PSKCAPI void pskc_free (void *ptr);

/* Container */

typedef struct pskc pskc;

extern PSKCAPI int pskc_init (pskc **container);
extern PSKCAPI int pskc_init_from_memory (pskc **container,
					  size_t len, const char *buffer);
extern PSKCAPI void pskc_done (pskc *container);

/* Validate */
extern PSKCAPI int pskc_validate (pskc *container, int *isvalid);

/* Output */

/**
 * pskc_output_formats_t:
 * @PSKC_OUTPUT_HUMAN_COMPLETE: All information in human-readable format.
 *
 * Enumeration of different PSKC output formats.
 */
typedef enum pskc_output_formats
  {
    PSKC_OUTPUT_HUMAN_COMPLETE = 0
  } pskc_output_formats_t;

extern PSKCAPI int pskc_output (pskc *container,
				pskc_output_formats_t format,
				char **out, size_t *len);

/* Error handling */

extern PSKCAPI const char *pskc_strerror (int err);
extern PSKCAPI const char *pskc_strerror_name (int err);

#endif /* PSKC_H */

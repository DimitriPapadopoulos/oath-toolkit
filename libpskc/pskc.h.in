/*
 * pskc.h - header file with prototypes for libpskc.
 * Copyright (C) 2012 Simon Josefsson
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef PSKC_H
#define PSKC_H

#ifndef PSKCAPI
# if defined LIBPSKC_BUILDING && defined HAVE_VISIBILITY && HAVE_VISIBILITY
#  define PSKCAPI __attribute__((__visibility__("default")))
# elif defined LIBPSKC_BUILDING && defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllexport)
# elif defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllimport)
# else
#  define PSKCAPI
# endif
#endif

#include <stddef.h> /* size_t */
#include <stdint.h> /* uint32_t, uint64_t */
#include <time.h> /* struct tm */

/**
 * PSKC_VERSION
 *
 * Pre-processor symbol with a string that describe the header file
 * version number.  Used together with pskc_check_version() to verify
 * header file and run-time library consistency.
 */
#define PSKC_VERSION "@VERSION@"

/**
 * PSKC_VERSION_NUMBER
 *
 * Pre-processor symbol with a hexadecimal value describing the header
 * file version number.  For example, when the header version is 1.2.3
 * this symbol will have the value 0x01020300.  The last two digits
 * are only used between public releases, and will otherwise be 00.
 */
#define PSKC_VERSION_NUMBER @VERSION_NUMBER@

/**
 * pskc_rc:
 * @PSKC_OK: Successful return.
 * @PSKC_MALLOC_ERROR: Memory allocation failed.
 * @PSKC_XML_PARSE_ERROR: XML parse error.
 * @PSKC_XML_SYNTAX_ERROR: Syntax error in XML data.
 * @PSKC_XML_ERROR: Error returned from XML library.
 * @PSKC_UNKNOWN_OUTPUT_FORMAT: Unknown output format.
 * @PSKC_LAST_ERROR: Meta-error indicating the last error code, for use
 *   when iterating over all error codes or similar.
 *
 * Return codes for PSKC functions.  All return codes are negative
 * except for the successful code %PSKC_OK which are guaranteed to be
 * 0.  Positive values are reserved for non-error return codes.
 *
 * Note that the #pskc_rc enumeration may be extended at a later date
 * to include new return codes.
 */
typedef enum
{
  PSKC_OK = 0,
  PSKC_MALLOC_ERROR = -1,
  PSKC_XML_PARSE_ERROR = -2,
  PSKC_XML_SYNTAX_ERROR = -3,
  PSKC_XML_ERROR = -4,
  PSKC_UNKNOWN_OUTPUT_FORMAT = -5,
  /* When adding anything above, you need to update errors.c and
     the following constant. */
  PSKC_LAST_ERROR = -5
} pskc_rc;

typedef struct pskc pskc_t;
typedef struct pskc_key pskc_key_t;

/* Global */

extern PSKCAPI int pskc_global_init (void);
extern PSKCAPI int pskc_global_done (void);

typedef void (*pskc_log_func) (pskc_t *container, pskc_key_t *keypackage,
			       const char *format, ...);
extern PSKCAPI void pskc_global_log (pskc_log_func log_func);

extern PSKCAPI const char *pskc_check_version (const char *req_version);

extern PSKCAPI void pskc_free (void *ptr);

/* Container */

extern PSKCAPI int pskc_init (pskc_t **container);
extern PSKCAPI int pskc_init_from_memory (pskc_t **container,
					  size_t len, const char *buffer);
extern PSKCAPI void pskc_done (pskc_t *container);

/* Types */

/**
 * pskc_pinusagemode:
 * @PSKC_PINUSAGEMODE_UNKNOWN: Unknown mode.
 * @PSKC_PINUSAGEMODE_LOCAL: PIN is checked locally on the device.
 * @PSKC_PINUSAGEMODE_PREPEND: PIN is prepended to the OTP and checked
 *   by OTP validating party.
 * @PSKC_PINUSAGEMODE_APPEND: PIN is appended to the OTP and checked
 *   by OTP validating party.
 * @PSKC_PINUSAGEMODE_ALGORITHMIC: The PIN is used as part of the
 * algorithm computation.
 *
 * Enumeration of PIN Policy Usage Modes.  This indicate the way the
 * PIN is used.
 */
typedef enum
  {
    PSKC_PINUSAGEMODE_UNKNOWN = 0,
    PSKC_PINUSAGEMODE_LOCAL = 1,
    PSKC_PINUSAGEMODE_PREPEND = 2,
    PSKC_PINUSAGEMODE_APPEND = 3,
    PSKC_PINUSAGEMODE_ALGORITHMIC = 4
  } pskc_pinusagemode;

extern PSKCAPI const char *
pskc_pinusagemode2str (pskc_pinusagemode pinusagemode);
extern PSKCAPI pskc_pinusagemode
pskc_str2pinusagemode (const char *pinusagemode);

/**
 * pskc_valueformat:
 * @PSKC_VALUEFORMAT_UNKNOWN: Unknown format.
 * @PSKC_VALUEFORMAT_DECIMAL: Only numerical digits.
 * @PSKC_VALUEFORMAT_HEXADECIMAL: Hexadecimal response.
 * @PSKC_VALUEFORMAT_ALPHANUMERIC: All letters and numbers (case sensitive).
 * @PSKC_VALUEFORMAT_BASE64: Base-64 encoded.
 * @PSKC_VALUEFORMAT_BINARY: Binary data.
 *
 * Enumeration of PSKC value encoding formats.
 */
typedef enum
  {
    PSKC_VALUEFORMAT_UNKNOWN = 0,
    PSKC_VALUEFORMAT_DECIMAL = 1,
    PSKC_VALUEFORMAT_HEXADECIMAL = 2,
    PSKC_VALUEFORMAT_ALPHANUMERIC = 3,
    PSKC_VALUEFORMAT_BASE64 = 4,
    PSKC_VALUEFORMAT_BINARY = 5
  } pskc_valueformat;

extern PSKCAPI const char *
pskc_valueformat2str (pskc_valueformat valueformat);
extern PSKCAPI pskc_valueformat
pskc_str2valueformat (const char *valueformat);

/**
 * pskc_keyusage:
 * @PSKC_KEYUSAGE_UNKNOWN: Unknown format.
 * @PSKC_KEYUSAGE_OTP: The key MUST only be used for OTP generation.
 * @PSKC_KEYUSAGE_CR: The key MUST only be used for Challenge/Response purposes.
 * @PSKC_KEYUSAGE_ENCRYPT: The key MUST only be used for data
 * encryption purposes.
 * @PSKC_KEYUSAGE_INTEGRITY: The key MUST only be used to generate a
 * keyed message digest for data integrity or authentication purposes.
 * @PSKC_KEYUSAGE_VERIFY: The key MUST only be used to verify a keyed
 * message digest for data integrity or authentication purposes (this
 * is the opposite key usage of 'Integrity').
 * @PSKC_KEYUSAGE_UNLOCK: The key MUST only be used for an inverse
 * Challenge/ Response in the case where a user has locked the device
 * by entering a wrong PIN too many times (for devices with PIN-input
 * capability).
 * @PSKC_KEYUSAGE_DECRYPT: The key MUST only be used for data
 * decryption purposes.
 * @PSKC_KEYUSAGE_KEYWRAP: The key MUST only be used for key wrap purposes.
 * @PSKC_KEYUSAGE_UNWRAP: The key MUST only be used for key unwrap purposes.
 * @PSKC_KEYUSAGE_DERIVE: The key MUST only be used with a key
 * derivation function to derive a new key.
 * @PSKC_KEYUSAGE_GENERATE: The key MUST only be used to generate a
 * new key based on a random number and the previous value of the key.
 *
 * Enumeration of PSKC key usage values.  These values puts
 * constraints on the intended usage of the key.  The recipient of the
 * PSKC document MUST enforce the key usage.  The values are assigned
 * to numbers so that they can be ORed together to form a set of
 * values.
 */
typedef enum
  {
    PSKC_KEYUSAGE_UNKNOWN = 0,
    PSKC_KEYUSAGE_OTP = 1,
    PSKC_KEYUSAGE_CR = 2,
    PSKC_KEYUSAGE_ENCRYPT = 4,
    PSKC_KEYUSAGE_INTEGRITY = 8,
    PSKC_KEYUSAGE_VERIFY = 16,
    PSKC_KEYUSAGE_UNLOCK = 32,
    PSKC_KEYUSAGE_DECRYPT = 64,
    PSKC_KEYUSAGE_KEYWRAP = 128,
    PSKC_KEYUSAGE_UNWRAP = 256,
    PSKC_KEYUSAGE_DERIVE = 512,
    PSKC_KEYUSAGE_GENERATE = 1024
  } pskc_keyusage;

extern PSKCAPI const char *pskc_keyusage2str (pskc_keyusage keyusage);
extern PSKCAPI pskc_keyusage pskc_str2keyusage (const char *keyusage);

/* Accessors */
extern PSKCAPI const char *pskc_get_version (pskc_t *container);
extern PSKCAPI const char *pskc_get_id (pskc_t *container);
extern PSKCAPI pskc_key_t *pskc_get_keypackage (pskc_t *container,
						size_t i);

extern PSKCAPI const char *pskc_get_device_manufacturer (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_device_serialno (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_device_model (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_device_issueno (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_device_devicebinding (pskc_key_t *key);
extern PSKCAPI const struct tm *
pskc_get_device_startdate (pskc_key_t *key);
extern PSKCAPI const struct tm *
pskc_get_device_expirydate (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_device_userid (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_cryptomodule_id (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_id (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_algorithm (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_issuer (pskc_key_t *key);
extern PSKCAPI const char *
pskc_get_key_algparm_suite (pskc_key_t *key);
extern PSKCAPI pskc_valueformat
pskc_get_key_algparm_resp_encoding (pskc_key_t *key, int *present);
extern PSKCAPI uint32_t
pskc_get_key_algparm_resp_length (pskc_key_t *key, int *present);
extern PSKCAPI int pskc_get_key_algparm_resp_checkdigits (pskc_key_t *key,
							  int *present);
extern PSKCAPI const char *pskc_get_key_profileid (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_reference (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_friendlyname (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_userid (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_data_secret (pskc_key_t *key,
						     size_t *len);
extern PSKCAPI uint64_t pskc_get_key_data_counter (pskc_key_t *key,
						   int *present);
extern PSKCAPI uint32_t pskc_get_key_data_time (pskc_key_t *key,
						int *present);
extern PSKCAPI uint32_t pskc_get_key_data_timeinterval (pskc_key_t *key,
							int *present);
extern PSKCAPI uint32_t pskc_get_key_data_timedrift (pskc_key_t *key,
						     int *present);

extern PSKCAPI const struct tm *
pskc_get_key_policy_startdate (pskc_key_t *key);
extern PSKCAPI const struct tm *
pskc_get_key_policy_expirydate (pskc_key_t *key);
extern PSKCAPI const char *pskc_get_key_policy_pinkeyid (pskc_key_t *key);
extern PSKCAPI pskc_pinusagemode
pskc_get_key_policy_pinusagemode (pskc_key_t *key, int *present);
extern PSKCAPI uint32_t
pskc_get_key_policy_pinmaxfailedattempts (pskc_key_t *key, int *present);
extern PSKCAPI uint32_t pskc_get_key_policy_pinminlength (pskc_key_t *key,
							  int *present);
extern PSKCAPI uint32_t pskc_get_key_policy_pinmaxlength (pskc_key_t *key,
							  int *present);
extern PSKCAPI pskc_valueformat
pskc_get_key_policy_pinencoding (pskc_key_t *key, int *present);
extern PSKCAPI pskc_keyusage
pskc_get_key_policy_keyusage (pskc_key_t *key, int *present);
extern PSKCAPI uint64_t
pskc_get_key_policy_numberoftransactions (pskc_key_t *key, int *present);

/* Validate */
extern PSKCAPI int pskc_validate (pskc_t *container, int *isvalid);

/* Create */
extern PSKCAPI int pskc_build_xml (pskc_t *container, char **out, size_t *len);

/* Output */

/**
 * pskc_output_formats_t:
 * @PSKC_OUTPUT_HUMAN_COMPLETE: All information in human-readable format.
 *
 * Enumeration of different PSKC output formats.
 */
typedef enum pskc_output_formats
  {
    PSKC_OUTPUT_HUMAN_COMPLETE = 0
  } pskc_output_formats_t;

extern PSKCAPI int pskc_output (pskc_t *container,
				pskc_output_formats_t format,
				char **out, size_t *len);

/* Error handling */

extern PSKCAPI const char *pskc_strerror (int err);
extern PSKCAPI const char *pskc_strerror_name (int err);

#endif /* PSKC_H */

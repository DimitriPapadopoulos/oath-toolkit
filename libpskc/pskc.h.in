/*
 * pskc.h - header file for libpskc
 * Copyright (C) 2012 Simon Josefsson
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef PSKC_H
#define PSKC_H

#ifndef PSKCAPI
# if defined LIBPSKC_BUILDING && defined HAVE_VISIBILITY && HAVE_VISIBILITY
#  define PSKCAPI __attribute__((__visibility__("default")))
# elif defined LIBPSKC_BUILDING && defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllexport)
# elif defined _MSC_VER && ! defined LIBPSKC_STATIC
#  define PSKCAPI __declspec(dllimport)
# else
#  define PSKCAPI
# endif
#endif

/**
 * PSKC_VERSION
 *
 * Pre-processor symbol with a string that describe the header file
 * version number.  Used together with pskc_check_version() to verify
 * header file and run-time library consistency.
 */
#define PSKC_VERSION "@VERSION@"

/**
 * PSKC_VERSION_NUMBER
 *
 * Pre-processor symbol with a hexadecimal value describing the header
 * file version number.  For example, when the header version is 1.2.3
 * this symbol will have the value 0x01020300.  The last two digits
 * are only used between public releases, and will otherwise be 00.
 */
#define PSKC_VERSION_NUMBER @VERSION_NUMBER@

/**
 * pskc_rc:
 * @PSKC_OK: Successful return
 * @PSKC_MALLOC_ERROR: Memory allocation failed
 * @PSKC_LAST_ERROR: Meta-error indicating the last error code, for use
 *   when iterating over all error codes or similar.
 *
 * Return codes for PSKC functions.  All return codes are negative
 * except for the successful code %PSKC_OK which are guaranteed to be
 * 0.  Positive values are reserved for non-error return codes.
 *
 * Note that the #pskc_rc enumeration may be extended at a later date
 * to include new return codes.
 */
typedef enum
{
  PSKC_OK = 0,
  PSKC_MALLOC_ERROR = -1,
  /* When adding anything here, update PSKC_LAST_ERROR, errors.c
     and tests/tst_errors.c. */
  PSKC_LAST_ERROR = -1
} pskc_rc;

/* Global */

extern PSKCAPI int pskc_init (void);
extern PSKCAPI int pskc_done (void);

extern PSKCAPI const char *pskc_check_version (const char *req_version);

/* Error handling */

extern PSKCAPI const char *pskc_strerror (int err);
extern PSKCAPI const char *pskc_strerror_name (int err);

#endif /* PSKC_H */

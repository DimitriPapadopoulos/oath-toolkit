<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
          "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
	  [
	  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
	  <!ENTITY version SYSTEM "version.xml">
	  <!ENTITY pskc-example-serialno SYSTEM "serialno.sgml">
	  <!ENTITY pskc-example-mini SYSTEM "pskc-mini.sgml">
	  <!ENTITY pskc-example-hotp SYSTEM "pskc-hotp.sgml">
	  <!ENTITY pskc-example-hotp-human SYSTEM "pskc-hotp-human.sgml">
	  <!ENTITY pskc-example-pskc2csv SYSTEM "pskc2csv.sgml">
	  <!ENTITY pskc-example-pskctool-h SYSTEM "pskctool-h.sgml">
	  ]>
<book id="index">
  <bookinfo>
    <title>PSKC Library Manual</title>
    <authorgroup>
      <author>
        <firstname>Simon</firstname>
        <surname>Josefsson</surname>
	<email>simon@josefsson.org</email>
      </author>
    </authorgroup>
    <copyright>
      <year>2012</year>
      <holder>Simon Josefsson</holder>
    </copyright>
    <legalnotice>
      <para>
	Copying and distribution of this file, with or without modification,
	are permitted in any medium without royalty provided the copyright
	notice and this notice are preserved.
      </para>
    </legalnotice>

    <abstract>
      <para>
	The Portable Symmetric Key Container (PSKC) format is used to
	transport and provision symmetric keys to cryptographic
	devices or software.  The PSKC Library allows you to parse,
	validate and generate PSKC data.  This manual documents the
	interfaces of PSKC library and contains a tutorial to get you
	started working with the library.
      </para>
    </abstract>
    <releaseinfo>
      Version &version;.  The latest version of this documentation can
      be found on-line at
      <ulink role="online-location"
	     url="http://www.nongnu.org/oath-toolkit/libpskc/">
	http://www.nongnu.org/oath-toolkit/libpskc/</ulink>.
    </releaseinfo>
  </bookinfo>

  <part id="pskc-tutorial">
    <title>Tutorial</title>
    <chapter id="pskc-tutorial-quickstart">
      <title>Quickstart</title>
      <para>
	The Portable Symmetric Key Container (PSKC) format is used to
	transport and provision symmetric keys to cryptographic
	devices or software.  The PSKC Library allows you to parse,
	validate and generate PSKC data.  The PSKC Library is written
	in C, uses LibXML, and is licensed under LGPLv2+.  A companion
	to the library is a command line tool (pskctool) to
	interactively manipulate PSKC data.
      </para>

      <para>
	To get a feeling of the PSKC data format we show the shortest
	possible valid PSKC content.
      </para>

      &pskc-example-mini;

      <para>
	Of course, since the intent with PSKC is to transport
	cryptographic keys, the example above is of little use since
	it does not carry any keys.  The next example is more
	realistic, and show PSKC data used to transport a key used for
	a OATH HOTP implementation.  The interesting values are the
	DeviceInfo values to identify the intended hardware, the Key
	Id "12345678", and the base64-encoded shared secret
	"MTIzNA==".
      </para>

      &pskc-example-hotp;

      <para>
	To illustrate how the library works, let's give an example on
	how to parse the data above and print the device serial number
	(SerialNo field).  The code below is complete but performs no
	error checking whatsoever and is thus unsafe to use as-is.
      </para>

	&pskc-example-serialno;

      <para>
	Compiling and linking code with the PSKC Library requires that
	you specify correct compilation flags so that the header
	include file and the shared library is found.  There is only
	one include file and it should be used
	like <link linkend="libpskc-pskc">#include
	&lt;pskc/pskc.h&gt;</link>.  The library is called libpskc.so
	on GNU systems and libpskc.dll on Windows systems.  To build
	the previous file, assuming the code is stored in a file
	called "serialno.c", invoke the following command.
      </para>

      <para><informalexample><programlisting>cc -o serialno serialno.c -I/path/to/pskc/include/path -L/path/to/pskc/lib/path -Wl,-rpath/path/to/pskc/lib/path -lpskc</programlisting></informalexample></para>

      <para>
	A pkg-config file is provided, so that you may use pkg-config
	to select proper compilation flags if you want.
      </para>

      <para><informalexample><programlisting>cc -o serialno serialno.c $(pkg-config --cflags --libs libpskc)</programlisting></informalexample></para>

      <para>
	After building the tool you would invoke it passing the name
	of the file with the PSKC input above, and it will print the
	serial number.
      </para>

      <para><informalexample><programlisting>jas@latte:~$ ./serialno pskc.xml
SerialNo: 987654321
jas@latte:~$</programlisting></informalexample></para>

      <para>
	We conclude with a larger example illustrating how to read a
	PSKC file, parse it and print a human readable summary of the
	PSKC data to stderr, validate it against the PSKC XML Schema
	(this is normally not needed) and print the validation outcome
	to stderr, and iterate through all keys in the file and print
	to stdout a comma-separated list with three fields: the key
	id, the device serialno, and the hex encoded cryptographic
	key.  This code example check error codes and releases
	resources.
      </para>

	&pskc-example-pskc2csv;

      <para>
	Below we'll illustrate how to build the tool and run it on the
	same PSKC data as above.  The tool prints different things to
	stdout and stderr, which you can see below.
      </para>

      <para><informalexample><programlisting>
jas@latte:~$ cc -o pskc2csv pskc2csv.c $(pkg-config --cflags --libs libpskc)
jas@latte:~$ ./pskc2csv pskc.xml 2&gt; /dev/null
12345678,12345678,MTIzNDU2Nzg5MDEyMzQ1Njc4OTA=
jas@latte:~$ ./pskc2csv pskc.xml &gt; /dev/null
Portable Symmetric Key Container (PSKC):
	Version: 1.0
	KeyPackage 0:
		DeviceInfo:
			Manufacturer: Manufacturer
			SerialNo: 987654321
		Key:
			Id: 12345678
			Algorithm: urn:ietf:params:xml:ns:keyprov:pskc:hotp
			Key Secret (base64): MTIzNDU2Nzg5MDEyMzQ1Njc4OTA=
			Key Counter: 0
			Response Format Length: 8
			Response Format Encoding: DECIMAL

PSKC data is Schema valid: YES
jas@latte:~$</programlisting></informalexample></para>

    </chapter>

    <chapter id="pskc-tutorial-pskctool">
      <title>Command line pskctool</title>
      <para>
	To simplify working with PSKC data a command line tool is also
	provided, called "pskctool".  This tool can be used to parse,
	validate, and build PSKC data.  When invoked without
	parameters, it will print some instructions describing the
	parameters it accepts.
      </para>

      &pskc-example-pskctool-h;

      <para>
	The most common parameter to use is --check (-c) to parse and
	pretty print PSKC data.  A filename can be supplied to have
	the tool read PSKC data from that file, or if no filename is
	supplied, the tool will read from standard input.  To
	illustrate how the tool works, we will assume the following
	PSKC data is available in a file "pskc.xml".
      </para>

      &pskc-example-hotp;

      <para>
	Running the tool with the --check parameter, i.e., "pskctool
	--check pskc.xml" will produce a human readable variant of the
	PSKC data.
      </para>

      &pskc-example-hotp-human;

      <para>
	If the --verbose (-v) parameter is given, the tool will also
	build a new XML structure using the parsed values and then
	print the generated XML structure.  This can be useful to
	cleanup a non-indented or manually crafted PSKC file.  The
	output will still contain the human readable summary, but you
	may use --quiet (-q) to suppress that part.  Together, the
	combination --verbose --quiet can be used in batch jobs to
	clean up PSKC data.
      </para>

      <para>
	In some situations when using pskctool --check the tool may
	print a warning about unsupported elements.  The --debug
	parameter can be used in these situations to get more
	information about the source of the problem.  For example,
	running "pskctool --check --debug" on the data in figure 9 of
	RFC 6030 will currently yield the following output.
      </para>

      <para><informalexample><programlisting>
debug: unknown &lt;KeyContainer&gt; element &lt;Signature&gt;
warning: parse error (use -d to diagnose), output may be incomplete
      </programlisting></informalexample></para>

      <para>
	Even when noticing a problem, the tool continue with the
	parsing and will eventually print the information it managed
	to parse.  In some situations (e.g., batch jobs) you would
	prefer the tool to signal this error.  The --strict parameter
	can be used to make the tool fail when there is a parse error.
      </para>

      <para>
	The --validate (-e) parameter can be used to validate PSKC
	data according to the XML Schema specified in RFC 6030.  This
	performs a deep analysis and syntax check of the data and will
	print either "OK" or "FAIL" depending on validation outcome.
      </para>

      <para><informalexample><programlisting>
$ pskctool -e pskc-ocra.xml
OK
$
      </programlisting></informalexample></para>

      <para>
	Note that the exit code from pskctool --validate is 0 even
	when FAIL is printed, use --quiet to suppress output and let
	the exit code correspond to validation result.
      </para>

    </chapter>
  </part>

  <part id="pskc-reference">
    <title>API Reference</title>

    <para>This part contains the complete API reference for the PSKC
    Library.  There is a separate section for each include file, which
    contains related functions grouped together, but applications
    should include the top-level &lt;pskc/pskc.h&gt; file.</para>

    <xi:include href="xml/pskc.xml"/>
    <xi:include href="xml/version.xml"/>
    <xi:include href="xml/global.xml"/>
    <xi:include href="xml/errors.xml"/>
    <xi:include href="xml/enums.xml"/>
    <xi:include href="xml/container.xml"/>
    <xi:include href="xml/keypackage.xml"/>

    <index id="api-index-full">
      <title>Index of all symbols</title>
    </index>
  </part>

</book>
